<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.vitorgalvao.alfred.calmnotifications</string>
	<key>connections</key>
	<dict>
		<key>3E435725-836B-4634-BF9F-B8DBADDDEABF</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>4C30FC65-71BF-4EFE-94CC-B038B4D991CA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>5116FFE2-57F2-4B38-88EA-24FC77101347</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>CCD42A98-2018-4BC4-9B3A-90AA2B0AEB3A</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>4C30FC65-71BF-4EFE-94CC-B038B4D991CA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Vítor Galvão</string>
	<key>description</key>
	<string>Toggle Do Not Disturb</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>CalmNotifications</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>availableviaurlhandler</key>
				<false/>
				<key>triggerid</key>
				<string>dnd</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>CCD42A98-2018-4BC4-9B3A-90AA2B0AEB3A</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>if ! /usr/bin/shortcuts list | grep --quiet 'Calm Notifications'; then
  /usr/bin/open './Calm Notifications.shortcut'
  echo 'Missing Calm Notifications Shortcut' &gt;&amp;2
  exit 1
fi

/usr/bin/shortcuts run 'Calm Notifications' &lt;&lt;&lt; "${1}"</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>5</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>4C30FC65-71BF-4EFE-94CC-B038B4D991CA</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>dnd</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Getting status…</string>
				<key>script</key>
				<string>function runCommand(...arguments) {
  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.alloc.initFileURLWithPath(arguments[0])
  task.arguments = arguments.slice(1)
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const dataOut = stdout.fileHandleForReading.readDataToEndOfFile
  const stringOut = $.NSString.alloc.initWithDataEncoding(dataOut, $.NSUTF8StringEncoding).js

  return stringOut
}

function dndActive() {
  const assertPath = $("~/Library/DoNotDisturb/DB/Assertions.json").stringByExpandingTildeInPath.js
  const assertData = $.NSFileManager.defaultManager.contentsAtPath(assertPath)
   const assertString = $.NSString.alloc.initWithDataEncoding(assertData, $.NSUTF8StringEncoding).js
  const assertRecords = JSON.parse(assertString).data[0].storeAssertionRecords

  if (assertRecords) return true
  return false
}

function sfItem(itemObj) {
  return JSON.stringify({
    rerun: 0.5,
    items: [itemObj]
  })
}

function run(argv) {
  // DND enabled
  if (dndActive()) {
    return sfItem({
      title: "Turn it off",
      subtitle: "Allow notifications again",
      arg: "off",
      icon: { path: "icon_alt.png" }
    })
  }

  // DND disabled
  const givenTimeout = argv[0]

  // Any given value must start with a digit
  if (givenTimeout === undefined || !givenTimeout.match(/^\d/)) {
    return sfItem({
      title: "Turn it on",
      subtitle: "Stop notifications from going through",
      arg: "on"
    })
  }

  // Calculate timeout
  const timeoutMinutes = givenTimeout.match(/\d\s*h/) ?
    parseInt(parseFloat(givenTimeout) * 60) :
    parseInt(givenTimeout)

  const plurality = timeoutMinutes === 1 ? "minute" : "minutes"

  return sfItem({
    title: "Turn it on",
    subtitle: `Stop notifications from going through for ${timeoutMinutes} ${plurality}`,
    arg: timeoutMinutes
  })
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Toggle Do Not Disturb</string>
				<key>title</key>
				<string>CalmNotifications</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>3E435725-836B-4634-BF9F-B8DBADDDEABF</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string># THESE VARIABLES MUST BE SET. SEE THE ONEUPDATER README FOR AN EXPLANATION OF EACH.
readonly remote_info_plist="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/source/info.plist"
readonly workflow_url="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/${alfred_workflow_name}.alfredworkflow"
readonly download_type='direct'
readonly frequency_check='4'

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 "${1}"
}

function notification {
  local -r notificator="$(find . -type d -name 'Notificator.app')"
  if [[ -n "${notificator}" ]]; then
    "${notificator}/Contents/Resources/Scripts/notificator" --message "${1}" --title "${alfred_workflow_name}" --subtitle 'A new version is available'
    return
  fi

  local -r terminal_notifier="$(find . -type f -name 'terminal-notifier')"
  if [[ -n "${terminal_notifier}" ]]; then
    "${terminal_notifier}" -title "${alfred_workflow_name}" -subtitle 'A new version is available' -message "${1}"
    return
  fi

  osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
}

# Local sanity checks
readonly local_info_plist='info.plist'
readonly local_version="$(/usr/libexec/PlistBuddy -c 'print version' "${local_info_plist}")"

[[ -n "${local_version}" ]] || abort 'You need to set a workflow version in the configuration sheet.'
[[ "${download_type}" =~ ^(direct|page|github_release)$ ]] || abort "'download_type' (${download_type}) needs to be one of 'direct', 'page', or 'github_release'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) needs to be a number."

# Check for updates
if [[ $(find "${local_info_plist}" -mtime +"${frequency_check}"d) ]]; then
  if ! url_exists "${remote_info_plist}"; then abort "'remote_info_plist' (${remote_info_plist}) appears to not be reachable."; fi # Remote sanity check

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_info_plist}"
  readonly remote_version="$(/usr/libexec/PlistBuddy -c 'print version' "${tmp_file}")"

  if [[ "${local_version}" == "${remote_version}" ]]; then
    touch "${local_info_plist}" # Reset timer by touching local file
    exit 0
  fi

  if [[ "${download_type}" == 'page' ]]; then
    notification 'Opening download page…'
    open "${workflow_url}"
    exit 0
  fi

  download_url="$([[ "${download_type}" == 'github_release' ]] &amp;&amp; curl --silent "https://api.github.com/repos/${workflow_url}/releases/latest" | grep 'browser_download_url' | head -1 | sed -E 's/.*browser_download_url": "(.*)"/\1/' || echo "${workflow_url}")"

  if url_exists "${download_url}"; then
    notification 'Downloading and installing…'
    curl --silent --location --output "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow" "${download_url}"
    open "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow"
  else
    abort "'workflow_url' (${download_url}) appears to not be reachable."
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>5116FFE2-57F2-4B38-88EA-24FC77101347</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Call `dnd` to toggle Do Not Disturb. Optionally give a value to active it for that amount of minutes, or hours if an `h` is appended.

![Alfred search for dnd, turn on](images/about/dnd_on.png)
![Alfred search for dnd 1.5h](images/about/dnd_1.5h.png)
![Alfred search for dnd, turn off](images/about/dnd_off.png)

If you don’t have the required Shortcut, the Workflow will prompt you to install it.

![Calm Notifications shortcut](images/about/calm_notifications.png)</string>
	<key>uidata</key>
	<dict>
		<key>3E435725-836B-4634-BF9F-B8DBADDDEABF</key>
		<dict>
			<key>xpos</key>
			<real>40</real>
			<key>ypos</key>
			<real>150</real>
		</dict>
		<key>4C30FC65-71BF-4EFE-94CC-B038B4D991CA</key>
		<dict>
			<key>xpos</key>
			<real>245</real>
			<key>ypos</key>
			<real>30</real>
		</dict>
		<key>5116FFE2-57F2-4B38-88EA-24FC77101347</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<real>245</real>
			<key>ypos</key>
			<real>150</real>
		</dict>
		<key>CCD42A98-2018-4BC4-9B3A-90AA2B0AEB3A</key>
		<dict>
			<key>xpos</key>
			<real>40</real>
			<key>ypos</key>
			<real>30</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array/>
	<key>version</key>
	<string>2022.2</string>
	<key>webaddress</key>
	<string>https://vitorgalvao.com/</string>
</dict>
</plist>
